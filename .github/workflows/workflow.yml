name: build-and-deploy

on:
  push:
    branches:
      - master
      - testnet
  workflow_dispatch:
  pull_request:

env:
  RELAY_CHAIN_VERSION: v0.9.16

jobs:
  pop-runner-instance:
    name: create and setup infrastructure for branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      IS_LOCAL: ${{ github.event.pull_request.head.repo.fork == false }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: TMP
    outputs:
      runner: ${{ env.S3_BACKEND_KEY_NAME }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - id: set-backend-key-name
        name: Set Backend Key Name
        run: echo "S3_BACKEND_KEY_NAME=$(echo $(uuidgen))" >> $GITHUB_ENV    
      - id: determine-runner
        name: Determine runner
        run: if $IS_LOCAL; then echo "::set-output name=runner::${{ env.S3_BACKEND_KEY_NAME }}"; else echo "::set-output name=runner::ubuntu-latest"; fi;
      - name: checkout code
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/checkout@v2.1.0
      - name: setup node
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        if: ${{ env.IS_LOCAL == 'true' }}
        with:
          terraform_version: 0.12.25
      - name: rewrite tf state key
        id: tf-state-key
        if: ${{ env.IS_LOCAL == 'true' }}
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf
      - name: Terraform Init
        if: ${{ env.IS_LOCAL == 'true' }}
        id: init
        working-directory: ./infrastructure
        run: terraform init
      - name: Terraform plan
        if: ${{ env.IS_LOCAL == 'true' }}
        id: plan
        working-directory: ./infrastructure
        run: terraform plan -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}"
      - name: Terraform apply
        if: ${{ env.IS_LOCAL == 'true' }}
        id: apply
        working-directory: ./infrastructure
        run: terraform apply -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ steps.determine-runner.outputs.runner }}" -auto-approve
      - name: Sleep for 20 seconds
        if: ${{ env.IS_LOCAL == 'true' }}
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

  build:
    needs: pop-runner-instance
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git describe --tags --abbrev=0 --always
      - name: Install Rust
        uses: codota/toolchain@00a8bf2bdcfe93aefd70422d3dec07337959d3a4
        with:
          profile: minimal
      - name: Install clippy
        run: rustup component add clippy
      - name: Run clippy
        run: make clippy
        continue-on-error: false
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Test && Generate code coverage
        run: make coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
      - name: Build runtime
        run: cargo build --release --locked
        working-directory: runtime
      - name: Build node
        run: cargo build --release --locked
      - name: Version info
        run: ./target/release/basilisk --version
      - name: Get basilisk-raw json
        run: |
          cp target/release/basilisk target/release/testing-basilisk
          chmod +x ./target/release/testing-basilisk
          ./target/release/testing-basilisk build-spec --chain testnet-k8s --raw > basilisk-testnet-chainspec.jsons
      - name: Upload config file
        uses: actions/upload-artifact@v2
        with:
          name: basilisk-testnet-chainspec.json
          path: ./basilisk-testnet-chainspec.json
      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: basilisk
          path: target/release/basilisk
      - name: Upload release wasm
        uses: actions/upload-artifact@v2
        with:
          name: basilisk_runtime.compact.compressed.wasm
          path: target/release/wbuild/basilisk-runtime/basilisk_runtime.compact.compressed.wasm

  upload-config-to-s3:
    name: upload configuration to S3
    if: github.ref == 'refs/heads/testnet' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    env:
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_CONFIG_BUCKET }}/testnet/
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'eu-west-1'
      FILE: './basilisk-testnet-chainspec.json'
    steps:
      - uses: actions/download-artifact@v2
        name: Download config file
        with:
          name: basilisk-testnet-chainspec.json
          path: .
      - name: S3 Upload basilisk-testnet-chainspec.json
        uses: tpaschalis/s3-sync-action@master
  destroy-runner-instance:
    name: destroy runner
    runs-on: ubuntu-latest
    needs: [ pop-runner-instance, build, build-and-publish-docker-image]
    if: ${{ always() && github.event.pull_request.head.repo.fork == false }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SECRET: ${{ secrets.EC2_PWD }}
      S3_BACKEND_KEY_NAME: ${{ needs.pop-runner-instance.outputs.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
          continue-on-error: false
      - name: rewrite tf state key
        id: tf-state-key
        working-directory: ./infrastructure
        run: sed -i 's/BRANCH_ACTOR_KEY/${{ env.S3_BACKEND_KEY_NAME }}/g' infra.tf

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init
        continue-on-error: false

      - name: Terraform apply
        id: apply
        working-directory: ./infrastructure
        run: terraform destroy -var="ec2_pwd=$EC2_SECRET" -var="branch_name=${{ needs.pop-runner-instance.outputs.runner }}" -auto-approve
        continue-on-error: false

  build-and-publish-docker-image:
    needs: [pop-runner-instance, build]
    if: github.ref == 'refs/heads/testnet' && github.event_name != 'pull_request'
    runs-on: ${{ needs.pop-runner-instance.outputs.runner }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      ECR_URL: 601305236792.dkr.ecr.eu-west-1.amazonaws.com
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: sleep 30
        run: sleep 30
      - name: Configure AWS CLI
        run: |
          sudo apt-get -y install awscli
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region eu-west-1
      - uses: actions/download-artifact@v2
        name: Download basilisk binary
        with:
          name: basilisk
          path: .
      - name: Add execution for basilisk
        run: chmod 777 ./basilisk && ./basilisk --version
      - name: install docker
        run: sudo snap install docker
      - name: Sleep for 30 seconds
        run: sleep 30s
      - name: build docker image
        run: sudo docker build -t basilisk:latest .
      - name: get ecr credentials
        run: aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${{ env.ECR_URL }}
      - name: push image to ecr repository
        run: sudo docker tag basilisk:latest ${{ env.ECR_URL }}/basilisk
      - run: sudo docker push ${{ env.ECR_URL }}/basilisk:latest


  run-external-deployment:
    needs: build-and-publish-docker-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/testnet' && github.event_name != 'pull_request'
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.DISPATCH_DEPLOYMENT_TOKEN }}
          repository: galacticcouncil/testnet-deployment
          event-type: run-k8s-deployment
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

  test-inclusion:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain: [ main, testing ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download basilisk binary
        with:
          name: basilisk
          path: target/release
      - name: Prepare basilisk testing binary
        run: ln -f basilisk testing-basilisk
        working-directory: target/release
      - uses: robinraju/release-downloader@v1
        name: Download relay chain binary
        with:
          repository: paritytech/polkadot
          tag: ${{ env.RELAY_CHAIN_VERSION }}
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./basilisk && ./basilisk --version
        name: Basilisk version
        working-directory: target/release
      - run: chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
          check-latest: true
      - run: npm install && npm run ${{ matrix.chain }}
        name: Launch rococo local & wait for inclusion
        working-directory: scripts/wait-for-inclusion

  test-upgrade-runtime:
    needs: [build, version-check]
    runs-on: ubuntu-latest
    if: ${{ needs.version-check.outputs.runtime-upgraded == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/download-artifact@v2
        name: Download runtime wasm from pipeline
        with:
          name: basilisk_runtime.compact.compressed.wasm
          path: scripts/upgrade-runtime
      - uses: dawidd6/action-download-artifact@v2
        name: Download basilisk binary from master
        with:
          workflow: tests.yml
          branch: master
          name: basilisk
          path: target/release
      - uses: robinraju/release-downloader@v1
        name: Download relay chain binary
        with:
          repository: paritytech/polkadot
          tag: ${{ env.RELAY_CHAIN_VERSION }}
          fileName: polkadot
          out-file-path: ../polkadot/target/release
      - run: chmod +x ./basilisk && ./basilisk --version
        name: Basilisk version
        working-directory: target/release
      - run: chmod +x ./polkadot && ./polkadot --version
        name: Polkadot version
        working-directory: ../polkadot/target/release
      - uses: actions/setup-node@v2
        name: Setup node.js
        with:
          node-version: '14'
          check-latest: true
      - run: npm install && npm run start
        name: Test runtime upgrade
        working-directory: scripts/upgrade-runtime

  version-check:
    runs-on: ubuntu-latest
    outputs:
      runtime-upgraded: ${{ steps.check-runtime.outputs.upgraded }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Rust
        uses: codota/toolchain@00a8bf2bdcfe93aefd70422d3dec07337959d3a4
        with:
          profile: minimal
      - name: Get crate versions
        run: |
          VERSION_UPDATE=$(./scripts/list_crate_updates.sh)
          VERSION_UPDATE=$(cat << EOF
          $VERSION_UPDATE
          EOF
          )
          echo "VERSION_UPDATE<<EOF" >> $GITHUB_ENV
          echo "$VERSION_UPDATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Check runtime upgrade
        id: check-runtime
        if: contains(env.VERSION_UPDATE, 'Runtime version has been increased.')
        run: echo "::set-output name=upgraded::true"
      - name: Sticky Pull Request Comment
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          message: |
            ${{ env.VERSION_UPDATE }}